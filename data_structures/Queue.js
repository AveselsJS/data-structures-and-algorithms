// Унифицированная структура одного элемента очереди Queue
class Node {
  constructor(value) {
    // Значение передаваемое в элемент присваивается непосредственно элементу Node
    this.value = value;
    // По умолчанию отсутствует ссылка на следующий элемент
    this.next = null;
  }
}

class Queue {
  constructor(value) {
    // Инициализируем и присваиваем началу очереди экземпляр класса элемента Node
    const newMode = new Mode(value);
    // При инициализации очереди первому элементу будут присвоены маркеры начала и конца очереди
    this.first = newMode;
    this.last = newMode;
    // При инициализации очереди и создании одного элемента присваивается длина очереди, которая означает 1
    this.length = 1;
  }

  // Добавляет один элемент в очередь
  enqueue(value) {
    // Инициализация экземпляра класса элемента Node
    const newNode = new Node(value);
    // Проверка, что если очередь пуста, то маркерам начала и конца очереди присваивается элемент
    if (this.length === 0) {
      this.first = newNode;
      this.last = newNode;
      // Иначе добавление элемента идёт вконец очереди
    } else {
      // Присваивание последнему элементу ссылки на новый элемент
      this.last.next = newNode;
      // Переприсваивание последнему элементу на новый элемент
      this.last = newNode;
    }
    // Увеличивает длину очереди на 1
    this.length++;
    // Возвращает очередь
    return this;
  }

  // Удаляет один элемент из очереди
  dequeue() {
    // Проверка, что если очередь пуста, то вернуть undefined
    if (this.length === 0) return undefined;
    // Присваивание маркеру temp действующий первый элемент очереди
    let temp = this.first;
    // Проверка, что если длина очереди равна единице, то последнему элементу (он же и единственный) присваивается null
    if (this.length === 1) {
      this.last = null;
      // Иначе удаляется элемент с начала очереди
    } else {
      // Присваивается маркеру начала очереди - второй элемент очереди
      this.first = this.first.next;
      // Переприсваивается значение связующей ссылки у старого первого элемент на null, тем самым её удаляя из очереди
      temp.next = null;
    }
    // Уменьшает длину очереди на 1
    this.length--;
    // Возвращает удалённый элемент
    return temp;
  }
}
