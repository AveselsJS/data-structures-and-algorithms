class HashTable {
  // По умолчанию размер хэш-таблицы равен 7 ячейкам
  constructor(size = 7) {
    // При ининциализации экземпляра класса HashTable
    // можно указать желаемый размер этой самой хэш-таблицы
    this.dataMap = new Array(size);
  }

  // Функция хеширования, которая заменяет ключ на абстрактную цифру, расчитанная по формуле
  _hash(key) {
    let hash = 0;
    for (let i = 0; i < key.length; i++) {
      hash = (hash + key.charCodeAt(i) * 23) % this.dataMap.length;
    }
    return hash;
  }

  // Записывает значение с определённым ключём в хэш-таблицу
  set(key, value) {
    // Обработка аргумента ключа функцией хеширования
    let index = this._hash(key);
    // Проверка, что если не существует массива с данным индексом (ключем),
    // то инициализировать массив и вложить в него массив с двумя элемента: индексом (ключем) и значением
    if (!this.dataMap[index]) this.dataMap[index] = [];
    // Если массив с этим индексом уже существует, тогда добавить в него новый массив: ключ, значение
    this.dataMap[index].push([key, value]);
    // Вернуть новый экземпляр хэш-таблицы
    return this;
  }

  // Получить значение из хэш-таблицы по его ключу
  get(key) {
    // Обработка аргумента ключа функцией хеширования
    let index = this._hash(key);
    // Если данный индекс существует в хэш-функции, тогда выполнить цикл
    if (this.dataMap[index]) {
      // В цикле пробежатся по всем индексам хэш-таблицы и если
      // введёный индекс равен индексу ключа, то вернуть этот ключ
      for (let i = 0; i < this.dataMap[index].length; i++) {
        if (this.dataMap[index][i][0] === key) {
          return this.dataMap[index][i][1];
        }
      }
    }
    // Иначе индекс не был найден в хэш-таблице, а следовательно
    // и такого элемента по такому-то ключу не существует и поэтому вернуть undefined
    return undefined;
  }

  // Вернуть все ключи существующие в хэш-таблице
  keys() {
    // Инициализация массива всех ключей
    let allKeys = [];
    // В цикле пробежатся по всей длине хэш-таблицы,
    // чтобы для каждого иттерируемого элемента цикла сформировать свой цикл.
    // Цикл внутри цикла необходим поскольку сама структура данных подразумевает массивы вложенные в массив
    for (let i = 0; i < this.dataMap.length; i++) {
      if (this.dataMap[i]) {
        // В цикле под ранее иттерируемый элемент каждого индекса вытянуть
        // на каждой иттерации ключ из пар ключ-значение, которые были добавлены в хэш-таблицу
        for (let j = 0; j < this.dataMap[i].length; i++) {
          allKeys.push(this.dataMap[index][i][0]);
        }
      }
    }
    // Вернуть массив ключей хэш-таблицы
    return allKeys;
  }
}
